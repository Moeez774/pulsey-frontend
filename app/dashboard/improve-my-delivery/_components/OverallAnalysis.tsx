'use client'

import React from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Mic, Clock, Megaphone, Lightbulb, Heart, Target, TrendingUp, CheckCircle, AlertTriangle, XCircle } from 'lucide-react'

interface OverallAnalysisProps {
    analysisData: any;
}

const OverallAnalysis: React.FC<OverallAnalysisProps> = ({ analysisData }) => {
    const overallSummary = analysisData?.overall_summary || {};

    const insightCards = [
        {
            icon: <Mic size={20} />,
            title: 'Delivery Style',
            content: overallSummary.delivery_style || 'Not analyzed',
            status: overallSummary.delivery_style?.includes('energetic') ? 'success' : 'warning'
        },
        {
            icon: <Clock size={20} />,
            title: 'Pacing',
            content: overallSummary.pacing || 'Not analyzed',
            status: overallSummary.pacing?.includes('good') ? 'success' : 'warning'
        },
        {
            icon: <Megaphone size={20} />,
            title: 'Hook Quality',
            content: overallSummary.hook_quality || 'Not analyzed',
            status: overallSummary.hook_quality?.includes('weak') ? 'error' : 'warning'
        },
        {
            icon: <Lightbulb size={20} />,
            title: 'Clarity',
            content: overallSummary.clarity || 'Not analyzed',
            status: overallSummary.clarity?.includes('clear') ? 'success' : 'warning'
        },
        {
            icon: <Heart size={20} />,
            title: 'Emotion Level',
            content: overallSummary.emotion_level || 'Not analyzed',
            status: overallSummary.emotion_level?.includes('high') ? 'success' : 'warning'
        },
        {
            icon: <Target size={20} />,
            title: 'Call to Action',
            content: overallSummary.call_to_action || 'Not analyzed',
            status: overallSummary.call_to_action?.includes('No explicit') ? 'error' : 'warning'
        },
        {
            icon: <TrendingUp size={20} />,
            title: 'Retention Risk',
            content: overallSummary.retention_risk || 'Not analyzed',
            status: overallSummary.retention_risk?.includes('Risk') ? 'error' : 'warning'
        }
    ]

    return (
        <div className="mb-8">
            <h3 className="text-xl font-bold text-[#231b1a]">Overall Analysis Summary</h3>
            <p className='text-xs text-[#7c6f6b] mt-1 mb-6'><strong>Note:</strong> These insights are generated by Pulsey AI and are not official YouTube metrics.</p>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-4">
                {insightCards.map((card, index) => (
                    <Card key={index} className="bg-white shadow-md border border-gray-200 hover:shadow-lg transition-shadow duration-200 overflow-hidden">
                        <CardHeader className="px-3 sm:px-4">
                            <CardTitle className="flex items-center gap-2 text-base sm:text-lg">
                                <div className="text-[#9c3313] flex-shrink-0">
                                    {card.icon}
                                </div>
                                <span className="text-[#231b1a] text-sm sm:text-base break-words">{card.title}</span>
                            </CardTitle>
                        </CardHeader>
                        <CardContent className="px-3 sm:px-4 pt-0">
                            <p className="text-[#7c6f6b] text-xs sm:text-sm leading-relaxed break-words">
                                {card.content}
                            </p>
                        </CardContent>
                    </Card>
                ))}
            </div>
        </div>
    )
}

export default OverallAnalysis 