'use client'
import React, { useEffect, useState } from 'react'
import TopSection from './_components/TopSection'
import OverallAnalysis from './_components/OverallAnalysis'
import LineByLineBreakdown from './_components/LineByLineBreakdown'
import HighlightsPainPoints from './_components/HighlightsPainPoints'
import DataVisuals from './_components/DataVisuals'
import ExportSection from './_components/ExportSection'
import { useSession } from 'next-auth/react'
import { ConnectYouTubeOverlay } from '@/components/items/MainContent/MainContent'
import { MdAutoAwesome, MdLink, MdDescription } from 'react-icons/md'
import { toast } from 'sonner'
import { extractYouTubeVideoId, parseSRTText, parseSRTWithTiming, TranscriptionResponse } from '@/components/components/Transcript/Transcript'
import { ArrowUp } from 'lucide-react'
import { useAuth } from '@/context/AuthProvider'

const ImproveMyDelivery = () => {
    const [transcript, setTranscript] = useState('');
    const [originalSrtText, setOriginalSrtText] = useState('');
    const [showAnalysis, setShowAnalysis] = useState(false);
    const [analysisData, setAnalysisData] = useState<any>(null);
    const [captionInfo, setCaptionInfo] = useState<any>(null);
    const [isRawTranscript, setIsRawTranscript] = useState(false);
    const [isAnalyzing, setIsAnalyzing] = useState(false);
    const [isDeepAnalysis, setIsDeepAnalysis] = useState(false);
    const [isCompleted, setIsCompleted] = useState(false);
    const { data: session } = useSession();
    const { user } = useAuth();

    // Input state for sticky card
    const [inputType, setInputType] = useState<'url' | 'transcript'>('url');
    const [inputValue, setInputValue] = useState('');
    const [isGettingTranscript, setIsGettingTranscript] = useState(false);

    const handleAnalyze = async () => {
        if (!inputValue.trim()) {
            toast.error('Please enter a YouTube URL or transcript')
            return
        }

        if (inputType === 'url') {
            setIsRawTranscript(false);
            if (!session?.accessToken) {
                toast.error('Not authenticated');
                return;
            }

            const videoId = extractYouTubeVideoId(inputValue);
            if (!videoId) {
                toast.error('Invalid YouTube video URL');
                return;
            }

            setIsGettingTranscript(true)
            setAnalysisData(null)
            setShowAnalysis(false)

            try {
                const response = await fetch(`/api/transcribe?videoId=${encodeURIComponent(videoId)}`, {
                    headers: {
                        Authorization: `Bearer ${session.accessToken as string}`
                    }
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    toast.error(errorData.error || 'Failed to transcribe video', { id: 'get-transcript' });
                    setIsGettingTranscript(false)
                    return;
                }

                const data: TranscriptionResponse = await response.json();

                const cleanText = parseSRTText(data.text);
                setTranscript(cleanText);
                setOriginalSrtText(data.text)

                setCaptionInfo({
                    format: data.format,
                    language: data.metadata.items[0]?.snippet.language || 'Unknown',
                    isAutoGenerated: data.metadata.items[0]?.snippet.trackKind === 'asr',
                    lastUpdated: data.metadata.items[0]?.snippet.lastUpdated
                });

                setIsGettingTranscript(false)

            } catch (err: any) {
                toast.error(err.message, { id: 'get-transcript' });
                setIsGettingTranscript(false)
            }
        } else {
            setIsRawTranscript(true);
            setIsGettingTranscript(true)

            setTimeout(() => {
                setTranscript(inputValue)
                setIsGettingTranscript(false)
            }, 1500)
        }
    }

    const analyzeWithAI = async (deepAnalysis: boolean = false) => {
        if (!session?.accessToken) {
            toast.error('Not authenticated', { id: 'analyze-transcript-error' });
            return;
        }

        setIsAnalyzing(true);
        setIsCompleted(false);

        try {
            const parsedSegments = parseSRTWithTiming(originalSrtText);
            const formattedTranscript = parsedSegments
                .map(segment => `${segment.start}: ${segment.text}`)
                .join(', ');

            const response = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/ai/analyze-transcript-deeper`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    transcript: originalSrtText ? formattedTranscript : transcript,
                    deep_analysis: deepAnalysis,
                    user_id: user?._id
                })
            })

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || 'Failed to analyze transcript');
            }

            const result = await response.json();
            if (result.success) {
                setIsCompleted(true);
                toast.success('Transcript analyzed successfully!', { id: 'analyze-transcript-success' });
                if (typeof result.data === 'string') {
                    const parsedData = JSON.parse(result.data);
                    setAnalysisData(parsedData);
                } else {
                    setAnalysisData(result.data);
                }
                setShowAnalysis(true);
            } else {
                toast.error(result.message, { id: 'analyze-transcript-error' });
            }

        } catch (error: any) {
            console.error('Analysis error:', error);
            toast.error(error.message || 'Failed to analyze transcript');
        } finally {
            setIsAnalyzing(false);
        }
    }

    return (
        <section className="flex flex-col bg-[#f3f3f3] items-center w-full h-[calc(100vh-70px)] lg:h-screen justify-center sm:p-2 relative">
            <div className="w-full max-w-7xl mx-auto bg-white h-full justify-center sm:rounded-sm border-t sm:border relative flex flex-col" style={{ scrollbarWidth: 'thin' }}>

                {/* Scrollable Content Area */}
                <div className="flex-1 flex flex-col h-full overflow-y-auto justify-center">
                    <div className="px-4 sm:px-6 pt-6 pb-10 h-full">
                        {isAnalyzing && (
                            <div className="text-center h-full w-full flex flex-col justify-center py-20">
                                <div className="w-24 h-24 mx-auto mb-4 rounded-full flex items-center justify-center">
                                    <div className="loader"></div>
                                </div>
                                <h3 className="text-sm font-medium text-[#231b1a] mb-2">{isDeepAnalysis ? "Running deep analysis..." : "Analyzing transcript..."}</h3>
                                <p className="text-xs text-[#7c6f6b]">{isDeepAnalysis ? "This may take 40s to 60s" : "This may take some seconds"}</p>
                            </div>
                        )}

                        {!isAnalyzing && analysisData && (
                            <div className='pb-10'>
                                <OverallAnalysis analysisData={analysisData} />
                                <LineByLineBreakdown analysisData={analysisData} />
                                <HighlightsPainPoints analysisData={analysisData} />
                                <DataVisuals analysisData={analysisData} />
                                <ExportSection analysisData={analysisData} transcript={transcript} />

                                {isCompleted && !isDeepAnalysis && (
                                    <div className='flex flex-col gap-3 px-2 pt-10'>
                                        <h1 className='text-sm text-[#595959] font-medium'>Need deep analysis? Get a full expert-level breakdown of your channel's performance, retention issues, and growth strategy. (May take 40â€“60 seconds.)</h1>
                                        <button className='text-[13px] px-4 py-2 bg-[#9c3313] text-white rounded-sm hover:bg-[#9c3313]/80 shadow-sm transition-all duration-200 w-fit flex items-center gap-2' onClick={() => {
                                            setAnalysisData(null);
                                            setIsCompleted(false);
                                            setIsDeepAnalysis(true);
                                            analyzeWithAI(true);
                                        }}>
                                            <MdAutoAwesome size={16} /> Deep Analysis
                                        </button>
                                    </div>
                                )}
                            </div>
                        )}

                        {(!isAnalyzing && !analysisData) && <TopSection
                            isRawTranscript={isRawTranscript}
                            analyzeWithAI={() => analyzeWithAI(false)}
                            transcript={transcript}
                            isAnalyzing={isAnalyzing}
                        />}
                    </div>
                </div>

                <div className="flex-shrink-0 pb-4 px-4 bg-white border-[#f0f0f0]">
                    <div className="max-w-5xl mx-auto">
                        <div className="bg-white border border-[#cfcfcf] shadow-lg rounded-3xl p-4">
                            <div className="space-y-4">
                                {inputType === 'url' ? (
                                    <input
                                        type="url"
                                        placeholder="Paste YouTube URL here..."
                                        value={inputValue}
                                        onChange={(e) => setInputValue(e.target.value)}
                                        className="text-sm outline-none w-full rounded-sm sm:text-[15px] font-medium border-none"
                                    />
                                ) : (
                                    <textarea
                                        placeholder="Paste your full transcript here..."
                                        value={inputValue}
                                        onChange={(e) => setInputValue(e.target.value)}
                                        rows={3}
                                        className="w-full border-none rounded-sm outline-none resize-none text-sm sm:text-base"
                                    />
                                )}

                                <div className='flex items-center justify-between'>
                                    <div className="flex flex-row gap-2 sm:gap-4">
                                        <button
                                            onClick={() => {
                                                setInputType('url')
                                                setInputValue('')
                                            }}
                                            className={`flex cursor-pointer items-center justify-center gap-2 shadow-sm px-[8px] sm:px-4 py-[8px] sm:py-[7px] sm:rounded-sm rounded-full transition-colors text-xs ${inputType === 'url'
                                                ? 'bg-[#9c3313] text-white'
                                                : 'bg-white border border-[#cfcfcf] text-[#595959] hover:bg-[#f0f0f0]'
                                                }`}
                                        >
                                            <MdLink size={20} />
                                            <span className="whitespace-nowrap sm:block hidden">YouTube URL</span>
                                        </button>
                                        <button
                                            onClick={() => {
                                                setInputType('transcript')
                                                setInputValue('')
                                            }}
                                            className={`flex cursor-pointer items-center justify-center shadow-sm gap-2 px-[8px] sm:px-4 py-[8px] sm:py-[7px] sm:rounded-sm rounded-full transition-colors text-xs ${inputType === 'transcript'
                                                ? 'bg-[#9c3313] text-white'
                                                : 'bg-white border border-[#cfcfcf] text-[#595959] hover:bg-[#f0f0f0]'
                                                }`}
                                        >
                                            <MdDescription size={20} />
                                            <span className="whitespace-nowrap sm:block hidden">Full Transcript</span>
                                        </button>
                                    </div>

                                    <button
                                        onClick={handleAnalyze}
                                        className='p-[9px] cursor-pointer hover:bg-[#9c3313]/80 transition-all duration-200 bg-[#9c3313] rounded-full'
                                    >
                                        <ArrowUp size={23} color='#fefefe' />
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            {!session && <ConnectYouTubeOverlay />}
        </section >
    )
}

export default ImproveMyDelivery 